security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        oauth_user_provider:
                id: oauth.user_provider

    firewalls:

        api:
            pattern: /api/
            stateless: true
            http_basic: true
            provider: app_user_provider

        main:
            lazy: true
            provider: app_user_provider
            entry_point: form_login

            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path: posts

            oauth:
                resource_owners:
                    azure: "/connect/azure/check"
                login_path: /connect/azure
                use_forward: false
                failure_path: /login
                default_target_path: posts
                oauth_user_provider:
                    service: oauth.user_provider

            logout:
                path: app_logout
                target: posts

    access_control:
#        - { path: "^/api/posts", roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: "/api/post", roles: ROLE_ADMIN }
        - { path: "/posts/update/", roles: IS_AUTHENTICATED_FULLY }

        
        
      

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
